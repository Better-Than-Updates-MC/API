buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.codehaus.groovy:groovy-all:3.0.8'
	}
}

plugins {
	id 'fabric-loom' version '361cd1c'
	id 'checkstyle'
	id 'eclipse'
	id 'idea'
	id 'java'
}

static String getSubprojectVersion(project, ver) {
	return "${project.mod_version}-$ver"
}

def moduleDependencies(Project project, String... projectNames) {
	project.with {
		def modules = projectNames.collect { dependencies.project(path: ":$it", configuration: 'dev') }

		dependencies {
			modules.each {
				implementationOnly it
			}
		}
		publishing {
			publications {
				mavenJava(MavenPublication) {
					pom.withXml {
						addDependency(it, 'compile', *modules)
					}
				}
			}
		}
	}
}

void addDependency(XmlProvider xml, String scope, Object... dependencies) {
	Node dependenciesNode = GroovyXmlUtil.getOrCreateNode(xml.asNode(), 'dependencies')

	dependencies.each {dependency ->
		dependenciesNode.appendNode('dependency').with {
			appendNode('groupId', dependency.group)
			appendNode('artifactId', dependency.name)
			appendNode('version', dependency.version)
			appendNode('scope', scope)
		}
	}
}


allprojects {
	apply plugin: 'maven-publish'
	apply plugin: 'fabric-loom'
	apply plugin: 'eclipse'
	apply plugin: 'idea'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	//Group is common for all API modules
	group = project.maven_group

	repositories {
		maven {
			name = 'Jitpack'
			url 'https://jitpack.io/'
		}
		maven {
			name = 'HalfOf2'
			url = 'https://storage.googleapis.com/devan-maven/'
		}
	}

	configurations {
		implementationOnly //A non-transitive implementation
		runtimeClasspath.extendsFrom implementationOnly
		compileClasspath.extendsFrom implementationOnly

	}

	minecraft {
		//Skip old versions of libraries which Mojang use but we don't need
		addLibraryFilter {library ->
			return !(library.startsWith('net.minecraft:launchwrapper:') ||
					library.startsWith('net.sf.jopt-simple:jopt-simple:') ||
					library.startsWith('org.ow2.asm:asm-all:'))
		}
	}

	dependencies {
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"

		mappings loom.fromCommit("Better-Than-Updates-MC/Mappings", "${project.mappings}") {spec ->
			spec.version = "b1.7.3-${project.mappings}"
		}

		modImplementation("io.github.minecraft-cursed-legacy:cursed-fabric-loader:${project.loader_version}") {
			transitive false //Avoid leaking Loader's dependencies forwards
		}

		//For @Nullable and @NotNull
		compileOnly 'org.jetbrains:annotations:22.0.0'
	}

	sourceSets {
		test {
			compileClasspath += main.compileClasspath + main.output
			runtimeClasspath += main.runtimeClasspath + main.output
		}
	}

	afterEvaluate {
		processResources {
			inputs.property "version", project.version
			filesMatching("fabric.mod.json") {
				expand "version": project.version
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier.set 'sources'
		from sourceSets.main.allSource
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				afterEvaluate {
					artifact(remapJar) {
						builtBy remapJar
					}

					artifact(sourcesJar) {
						builtBy remapSourcesJar
					}
				}
			}
		}
	}
}

import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask
import net.fabricmc.loom.util.GroovyXmlUtil

subprojects {subproject ->
	task runTestmodClient(type: RunClientTask) {
		classpath sourceSets.test.runtimeClasspath
	}

	task runTestmodServer(type: RunServerTask) {
		classpath sourceSets.test.runtimeClasspath
	}

	assert this.remapJar != remapJar //No accidents moving this around
	this.remapJar.dependsOn(remapJar)

	configurations {
		out {
			canBeConsumed = true
			canBeResolved = false
		}
		dev {
			canBeConsumed = true
			canBeResolved = false
		}
		test {
			canBeConsumed = true
			canBeResolved = false
		}
	}

	task testJar(type: Jar) {
		from sourceSets.test.output
		classifier 'test'
	}

	artifacts {
		out remapJar
		dev jar
		test testJar
	}

	//Attach the subproject to the root project
	this.dependencies {
		implementationOnly project(path: ":$name", configuration: 'dev')
		testImplementation project(path: ":$name", configuration: 'test')
		afterEvaluate {//Do this after Loom tries to work out how included projects relate to remapJar tasks
			include project(path: ":$name", configuration: 'out')
		}
	}

	//Mark the subproject as a compile time dependency of the root project
	this.publishing {
		publications {
			mavenJava(MavenPublication) {
				pom.withXml {xml ->
					addDependency(xml, 'compile', subproject)
				}
			}
		}
	}
}

//Subprojects will set these themselves
archivesBaseName = archives_base_name
version = mod_version

dependencies {
	// TODO add modmenu to runtimeOnly
}