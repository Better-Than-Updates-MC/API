buildscript {
    repositories {
    	mavenCentral()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
		maven { 
			name = 'Jitpack'
			url 'https://jitpack.io/'
		}
	}
	dependencies {
        classpath 'com.github.Chocohead:Fabric-Loom:5a0ea93'
	}
}

plugins {
	id 'java'
    id 'checkstyle'
}

//Subprojects will set these themselves
archivesBaseName = archives_base_name
version = mod_version

def getSubprojectVersion(project, ver) {
	return "${project.mod_version}-$ver"
}

def moduleDependencies(Project project, String... projectNames) {
	project.with {
		def modules = projectNames.collect { dependencies.project(path: ":$it", configuration: 'dev') }

		dependencies {
			modules.each {
				implementationOnly it
			}
		}
		publishing {
			publications {
				mavenJava(MavenPublication) {
					pom.withXml {
						def dependenciesNode = asNode().appendNode('dependencies')

						modules.each {module ->
							dependenciesNode.appendNode('dependency').with {
								appendNode('groupId', module.group)
								appendNode('artifactId', module.name)
								appendNode('version', module.version)
								appendNode('scope', 'compile')
								println "Project is ${module.group}:${module.name}:${module.version}"
							}
						}
					}
				}
			}
		}
	}
}


allprojects {	
	apply plugin: 'fabric-loom'

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	group = project.maven_group

	repositories {
		maven { 
			name = 'Jitpack'
			url 'https://jitpack.io/'
		}
	}

	configurations {
		implementationOnly //A non-transitive implementation
		runtimeClasspath.extendsFrom implementationOnly
		compileClasspath.extendsFrom implementationOnly
		
	}

	minecraft {
		addLibraryFilter {library ->
			return !(library.startsWith('net.minecraft:launchwrapper:') ||
						library.startsWith('net.sf.jopt-simple:jopt-simple:') ||
						library.startsWith('org.ow2.asm:asm-all:'))
		}
	}

	dependencies {
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"

		mappings loom.fromCommit('minecraft-cursed-legacy/Plasma', '59b928b') {spec ->
			spec.version = 'b1.7.3-15'
		}

		// for config api
		implementation 'tk.valoeghese:ZoesteriaConfig:1.3.6'

		modImplementation("com.github.minecraft-cursed-legacy:cursed-fabric-loader:${project.loader_version}") {
			transitive false
		}
		
		// CoreLib for Models
		modImplementation 'com.github.paulevsGitch:B.1.7.3-CoreLib:v.1.3.0'
	}

	sourceSets {
		test {
			compileClasspath += main.compileClasspath + main.output
			runtimeClasspath += main.runtimeClasspath + main.output
		}
	}

	afterEvaluate {
		remapJar {
			input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
			archiveName = "${archivesBaseName}-${version}.jar"
		}
		
		processResources {
			inputs.property 'version', project.version

			from(sourceSets.main.resources.srcDirs) {
				include 'fabric.mod.json'
				expand 'version': project.version
			}

			from(sourceSets.main.resources.srcDirs) {
				exclude 'fabric.mod.json'
			}
		}
	}

	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this task, sources will not be generated.
	task sourcesJar(type: Jar, dependsOn: classes) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}
}

import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

subprojects {
	apply plugin: 'maven-publish'

	task runTestmodClient(type: RunClientTask) {
		classpath sourceSets.test.runtimeClasspath
	}

	task runTestmodServer(type: RunServerTask) {
		classpath sourceSets.test.runtimeClasspath
	}

	assert this.remapJar != remapJar //No accidents moving this around
	this.remapJar.dependsOn(remapJar)

	configurations {
		dev {
			canBeConsumed = true
			canBeResolved = false
		}
		test {
			canBeConsumed = true
			canBeResolved = false
		}
	}

	task testJar(type: Jar) {
		from sourceSets.test.output
		classifier 'test'
	}

	artifacts {
		dev jar
		test testJar
	}
}

dependencies {
	ext.useDep = {dep ->
		implementationOnly project(path: ":$dep", configuration: 'dev')
		testImplementation project(path: ":$dep", configuration: 'test')
		include project(":$dep")
	}

	afterEvaluate {
		// Root project setup nonsense
		useDep 'legacy-api-base'
		useDep 'legacy-attached-data-v1'
		useDep 'legacy-config-v0'
		useDep 'legacy-interaction-events-v0'
		useDep 'legacy-lifecycle-events-v0'
		useDep 'legacy-networking-v0'
		useDep 'legacy-networking-v0'
		useDep 'legacy-recipes-v0'
		useDep 'legacy-registries-v1'
		useDep 'legacy-terrain-v1'
		useDep 'legacy-tile-entities-v1'
		useDep 'legacy-translations-v0'
		useDep 'legacy-worldtypes-v1'
	}
	
	include 'com.github.paulevsGitch:B.1.7.3-CoreLib:v.1.3.0'
	include 'tk.valoeghese:ZoesteriaConfig:1.3.6'
}

minecraft {
	addIncludeTweaker {dependency, json ->
		if ('tk.valoeghese' == dependency.group && 'ZoesteriaConfig' == dependency.name) {
			json.addProperty('description', 'Config format and library designed for Zoesteria 2, but also useable by other projects')
			json.addProperty('license', 'MIT')

			def authors = new com.google.gson.JsonArray()
			authors.add('Valoeghese')
			json.add('authors', authors)

			def contact = new com.google.gson.JsonObject()
			contact.addProperty('sources', 'https://github.com/valoeghese/ZoesteriaConfig')
			contact.addProperty('issues', 'https://github.com/valoeghese/ZoesteriaConfig/issues')
			json.add('contact', contact)
		}
	}
}